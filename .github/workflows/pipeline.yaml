on:
  push:
    branches:
      - 'main'
env:
  CLUSTER_NAME: aks-lamp-local
  CLUSTER_RESOURCE_GROUP: lamp-service-local
  NAMESPACE: lamp-service
jobs:
  build-artifact:
    runs-on: ubuntu-latest  
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Build project with Maven
      run: mvn -B clean package 
    - run: ls -la && ls -la target/
    - uses: actions/upload-artifact@v1
      with:
        name: app-artifact
        path: target/lamp-service.jar
  build-image:
    runs-on: ubuntu-latest
    needs: build-artifact
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v1
      with:
          name: app-artifact
          path: target/
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - run: ls -la && ls -la target/
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: shadadelic/lamp-service:${{ github.run_attempt }}
  # Based on the following tutorial
  # Ref.: https://docs.microsoft.com/en-us/azure/aks/kubernetes-action
  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: build-image
    environment: dev
    steps:
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -
  #   - uses: azure/k8s-deploy@v1
  #     with:
  #       manifests: |
  #         ${{ github.workspace }}/manifests/deployment.yaml
  #         ${{ github.workspace }}/manifests/service.yaml
  #       images: |
  #         ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
  #       namespace: ${{ env.NAMESPACE }}    
  # deploy-to-prod:
  #   runs-on: ubuntu-latest
  #   needs: deploy-to-env
  #   environment: prod
  #   steps:
  #     - run: echo "Hello, World"